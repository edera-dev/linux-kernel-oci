From 30c089a2f43299b359ff7dc257ccc4bddd912330 Mon Sep 17 00:00:00 2001
From: Benjamin Leggett <benjamin@edera.io>
Date: Mon, 28 Apr 2025 19:29:39 -0400
Subject: [PATCH] hacktest

---
 arch/x86/pci/xen.c                         | 18 +++++--
 drivers/gpu/drm/amd/amdgpu/amdgpu_device.c |  7 ++-
 drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c    | 11 ++--
 drivers/pci/msi/msi.c                      | 62 +++++++++++++++++++---
 drivers/pci/pci.c                          |  2 +
 drivers/pci/xen-pcifront.c                 | 13 +++--
 6 files changed, 94 insertions(+), 19 deletions(-)

diff --git a/arch/x86/pci/xen.c b/arch/x86/pci/xen.c
index 0f2fe524f60d..6181cf9de0e6 100644
--- a/arch/x86/pci/xen.c
+++ b/arch/x86/pci/xen.c
@@ -170,12 +170,17 @@ static int xen_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 	struct msi_desc *msidesc;
 	int *v;
 
-	if (type == PCI_CAP_ID_MSI && nvec > 1)
+	dev_info(&dev->dev, "Xen PCI setup domU MSI irqs\n");
+	if (type == PCI_CAP_ID_MSI && nvec > 1) {
+		dev_info(&dev->dev, "Xen PCI setup domU bailing due to nvec\n");
 		return 1;
+	}
 
 	v = kcalloc(max(1, nvec), sizeof(int), GFP_KERNEL);
-	if (!v)
+	if (!v) {
+		dev_info(&dev->dev, "Xen PCI setup domU bailing due to alloc err\n");
 		return -ENOMEM;
+	}
 
 	if (type == PCI_CAP_ID_MSIX)
 		ret = xen_pci_frontend_enable_msix(dev, v, nvec);
@@ -270,6 +275,7 @@ static int xen_initdom_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 	int ret = 0;
 	struct msi_desc *msidesc;
 
+	dev_info(&dev->dev, "xen: setting up dom0 MSI IRQs\n");
 	msi_for_each_desc(msidesc, &dev->dev, MSI_DESC_NOTASSOCIATED) {
 		struct physdev_map_pirq map_irq;
 		domid_t domid;
@@ -277,8 +283,10 @@ static int xen_initdom_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 		domid = ret = xen_find_device_domain_owner(dev);
 		/* N.B. Casting int's -ENODEV to uint16_t results in 0xFFED,
 		 * hence check ret value for < 0. */
-		if (ret < 0)
+		if (ret < 0) {
+			dev_info(&dev->dev, "xen: could not find owner domain, self-assigning\n");
 			domid = DOMID_SELF;
+		}
 
 		memset(&map_irq, 0, sizeof(map_irq));
 		map_irq.domid = domid;
@@ -290,9 +298,11 @@ static int xen_initdom_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 		map_irq.devfn = dev->devfn;
 
 		if (type == PCI_CAP_ID_MSI && nvec > 1) {
+			dev_info(&dev->dev, "xen: setting up MSI, assuming PIRQ_TYPE_MULTI_MSI\n");
 			map_irq.type = MAP_PIRQ_TYPE_MULTI_MSI;
 			map_irq.entry_nr = nvec;
 		} else if (type == PCI_CAP_ID_MSIX) {
+			dev_info(&dev->dev, "xen: setting up MSI-X\n");
 			int pos;
 			unsigned long flags;
 			u32 table_offset, bir;
@@ -314,6 +324,7 @@ static int xen_initdom_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 			ret = HYPERVISOR_physdev_op(PHYSDEVOP_map_pirq,
 						    &map_irq);
 		if (type == PCI_CAP_ID_MSI && nvec > 1 && ret) {
+			dev_info(&dev->dev, "xen: PIRQ_TYPE_MULTI_MSI not available, returning >0 so driver can retry\n");
 			/*
 			 * If MAP_PIRQ_TYPE_MULTI_MSI is not available
 			 * there's nothing else we can do in this case.
@@ -324,6 +335,7 @@ static int xen_initdom_setup_msi_irqs(struct pci_dev *dev, int nvec, int type)
 			goto out;
 		}
 		if (ret == -EINVAL && !pci_domain_nr(dev->bus)) {
+			dev_info(&dev->dev, "xen: trying with PIRQ_TYPE_MSI\n");
 			map_irq.type = MAP_PIRQ_TYPE_MSI;
 			map_irq.index = -1;
 			map_irq.pirq = -1;
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
index 018dfccd771b..0764a3fc07b6 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_device.c
@@ -4585,8 +4585,10 @@ int amdgpu_device_init(struct amdgpu_device *adev,
 		dev_err(adev->dev, "amdgpu_pmu_init failed\n");
 
 	/* Have stored pci confspace at hand for restore in sudden PCI error */
-	if (amdgpu_device_cache_pci_state(adev->pdev))
+	if (amdgpu_device_cache_pci_state(adev->pdev)) {
+		DRM_INFO("Restoring PCI state:: %d\n", pdev);
 		pci_restore_state(pdev);
+	}
 
 	/* if we have > 1 VGA cards, then disable the amdgpu VGA resources */
 	/* this will fail for cards that aren't VGA class devices, just
@@ -6675,10 +6677,12 @@ bool amdgpu_device_cache_pci_state(struct pci_dev *pdev)
 	if (amdgpu_sriov_vf(adev))
 		return false;
 
+	DRM_INFO("Saving PCI state:: %d\n", pdev);
 	r = pci_save_state(pdev);
 	if (!r) {
 		kfree(adev->pci_state);
 
+		DRM_INFO("Caching PCI state:: %d\n", pdev);
 		adev->pci_state = pci_store_saved_state(pdev);
 
 		if (!adev->pci_state) {
@@ -6705,6 +6709,7 @@ bool amdgpu_device_load_pci_state(struct pci_dev *pdev)
 	r = pci_load_saved_state(pdev, adev->pci_state);
 
 	if (!r) {
+		DRM_WARN("Restoring PCI state\n");
 		pci_restore_state(pdev);
 	} else {
 		DRM_WARN("Failed to load PCI state, err:%d\n", r);
diff --git a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
index 19ce4da285e8..c4cafd52c15a 100644
--- a/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
+++ b/drivers/gpu/drm/amd/amdgpu/amdgpu_irq.c
@@ -278,10 +278,13 @@ int amdgpu_irq_init(struct amdgpu_device *adev)
 	/* Enable MSI if not disabled by module parameter */
 	adev->irq.msi_enabled = false;
 
-	if (!amdgpu_msi_ok(adev))
+	if (!amdgpu_msi_ok(adev)) {
+		dev_info(adev->dev, "falling back to intx irqs\n");
 		flags = PCI_IRQ_INTX;
-	else
+	} else {
+		dev_info(adev->dev, "requesting all possible types of irqs\n");
 		flags = PCI_IRQ_ALL_TYPES;
+	}
 
 	/* we only need one vector */
 	r = pci_alloc_irq_vectors(adev->pdev, 1, 1, flags);
@@ -292,7 +295,7 @@ int amdgpu_irq_init(struct amdgpu_device *adev)
 
 	if (amdgpu_msi_ok(adev)) {
 		adev->irq.msi_enabled = true;
-		dev_dbg(adev->dev, "using MSI/MSI-X.\n");
+		dev_info(adev->dev, "using MSI/MSI-X.\n");
 	}
 
 	INIT_WORK(&adev->irq.ih1_work, amdgpu_irq_handle_ih1);
@@ -315,7 +318,7 @@ int amdgpu_irq_init(struct amdgpu_device *adev)
 	adev->irq.irq = irq;
 	adev_to_drm(adev)->max_vblank_count = 0x00ffffff;
 
-	DRM_DEBUG("amdgpu: irq initialized.\n");
+	DRM_INFO("amdgpu: irq initialized.\n");
 	return 0;
 
 free_vectors:
diff --git a/drivers/pci/msi/msi.c b/drivers/pci/msi/msi.c
index 2f647cac4cae..865db7c101d0 100644
--- a/drivers/pci/msi/msi.c
+++ b/drivers/pci/msi/msi.c
@@ -208,12 +208,17 @@ static inline void pci_write_msg_msi(struct pci_dev *dev, struct msi_desc *desc,
 
 static inline void pci_write_msg_msix(struct msi_desc *desc, struct msi_msg *msg)
 {
+	pci_info("writing msix msg");
 	void __iomem *base = pci_msix_desc_addr(desc);
+	pci_info("base addr: %p", base);
 	u32 ctrl = desc->pci.msix_ctrl;
+	pci_info("msix ctrl: %d", ctrl);
 	bool unmasked = !(ctrl & PCI_MSIX_ENTRY_CTRL_MASKBIT);
 
-	if (desc->pci.msi_attrib.is_virtual)
+	if (desc->pci.msi_attrib.is_virtual) {
+		pci_info(dev, "msi virtual attrib, not writing");
 		return;
+	}
 	/*
 	 * The specification mandates that the entry is masked
 	 * when the message is modified:
@@ -222,16 +227,24 @@ static inline void pci_write_msg_msix(struct msi_desc *desc, struct msi_msg *msg
 	 * entry while the entry is unmasked, the result is
 	 * undefined."
 	 */
-	if (unmasked)
+	if (unmasked) {
+		pci_info("entry is unmasked, writing with maskbit");
 		pci_msix_write_vector_ctrl(desc, ctrl | PCI_MSIX_ENTRY_CTRL_MASKBIT);
+	}
 
+	pci_info("writelo data: %d, addr: %d", msg->address_lo, base + PCI_MSIX_ENTRY_LOWER_ADDR);
 	writel(msg->address_lo, base + PCI_MSIX_ENTRY_LOWER_ADDR);
+	pci_info("writehi data: %d, addr: %d", msg->address_hi, base + PCI_MSIX_ENTRY_UPPER_ADDR);
 	writel(msg->address_hi, base + PCI_MSIX_ENTRY_UPPER_ADDR);
+	pci_info("write data: %d, addr: %d", msg->data, base + PCI_MSIX_ENTRY_DATA);
 	writel(msg->data, base + PCI_MSIX_ENTRY_DATA);
 
-	if (unmasked)
+	if (unmasked) {
+		pci_info("entry is (still) unmasked");
 		pci_msix_write_vector_ctrl(desc, ctrl);
+	}
 
+	pci_info("reading back 4 bytes of data from addr: %d", base + PCI_MSIX_ENTRY_DATA);
 	/* Ensure that the writes are visible in the device */
 	readl(base + PCI_MSIX_ENTRY_DATA);
 }
@@ -243,15 +256,19 @@ void __pci_write_msi_msg(struct msi_desc *entry, struct msi_msg *msg)
 	if (dev->current_state != PCI_D0 || pci_dev_is_disconnected(dev)) {
 		/* Don't touch the hardware now */
 	} else if (entry->pci.msi_attrib.is_msix) {
+		pci_info(dev, "writing msix msg\n");
 		pci_write_msg_msix(entry, msg);
 	} else {
+		pci_info(dev, "writing msi msg, not msix\n");
 		pci_write_msg_msi(dev, entry, msg);
 	}
 
 	entry->msg = *msg;
 
-	if (entry->write_msi_msg)
+	if (entry->write_msi_msg) {
+		pci_info(dev, "writing msi msg data\n");
 		entry->write_msi_msg(entry, entry->write_msi_msg_data);
+	}
 }
 
 void pci_write_msi_msg(unsigned int irq, struct msi_msg *msg)
@@ -512,21 +529,31 @@ void __pci_restore_msi_state(struct pci_dev *dev)
 	struct msi_desc *entry;
 	u16 control;
 
+	pci_info(dev, "restoring PCI MSI state...\n");
 	if (!dev->msi_enabled)
 		return;
 
+	pci_info(dev, "getting PCI MSI entry from IRQ...\n");
 	entry = irq_get_msi_desc(dev->irq);
 
+	pci_info(dev, "getting intx\n");
 	pci_intx_for_msi(dev, 0);
+	pci_info(dev, "enabling MSI\n");
 	pci_msi_set_enable(dev, 0);
-	if (arch_restore_msi_irqs(dev))
+	if (arch_restore_msi_irqs(dev)) {
+		pci_info(dev, "restoring msi irqs\n");
 		__pci_write_msi_msg(entry, &entry->msg);
+	}
 
+	pci_info(dev, "reading config flags as word\n");
 	pci_read_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, &control);
+	pci_info(dev, "updating mask\n");
 	pci_msi_update_mask(entry, 0, 0);
 	control &= ~PCI_MSI_FLAGS_QSIZE;
 	control |= PCI_MSI_FLAGS_ENABLE |
 		   FIELD_PREP(PCI_MSI_FLAGS_QSIZE, entry->pci.msi_attrib.multiple);
+
+	pci_info(dev, "writing config flags as word\n");
 	pci_write_config_word(dev, dev->msi_cap + PCI_MSI_FLAGS, control);
 }
 
@@ -556,11 +583,21 @@ void pci_msi_shutdown(struct pci_dev *dev)
 static void pci_msix_clear_and_set_ctrl(struct pci_dev *dev, u16 clear, u16 set)
 {
 	u16 ctrl;
+	int res;
 
 	pci_read_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, &ctrl);
 	ctrl &= ~clear;
 	ctrl |= set;
-	pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, ctrl);
+	if (ctrl & PCI_MSIX_FLAGS_ENABLE) {
+	  pci_info(dev, "enabling msix via ctrlflag\n");
+	}
+	res = pci_write_config_word(dev, dev->msix_cap + PCI_MSIX_FLAGS, ctrl);
+	pci_info(dev, "result from pci_write_config_word: %d\n", res);
+	if (ctrl & PCI_MSIX_FLAGS_ENABLE) {
+	  pci_info(dev, "enabled msix via ctrlflag\n");
+	} else {
+	  pci_info(dev, "did not enable msix via ctrlflag\n");
+	}
 }
 
 static void __iomem *msix_map_region(struct pci_dev *dev,
@@ -861,24 +898,35 @@ void __pci_restore_msix_state(struct pci_dev *dev)
 	struct msi_desc *entry;
 	bool write_msg;
 
+	pci_info(dev, "restoring PCI MSIX state...\n");
+
 	if (!dev->msix_enabled)
 		return;
 
+	pci_info(dev, "routing the table\n");
 	/* route the table */
 	pci_intx_for_msi(dev, 0);
 	pci_msix_clear_and_set_ctrl(dev, 0,
 				PCI_MSIX_FLAGS_ENABLE | PCI_MSIX_FLAGS_MASKALL);
 
+	pci_info(dev, "restoring the irqs\n");
 	write_msg = arch_restore_msi_irqs(dev);
 
+	pci_info(dev, "locking\n");
 	msi_lock_descs(&dev->dev);
 	msi_for_each_desc(entry, &dev->dev, MSI_DESC_ALL) {
-		if (write_msg)
+		if (write_msg) {
+			pci_info(dev, "writing msix msg %p for entry %p\n", &entry->msg, &entry);
 			__pci_write_msi_msg(entry, &entry->msg);
+		}
+		pci_info(dev, "writing msix vector control %p for entry %p\n", &entry->pci.msix_ctrl, &entry);
 		pci_msix_write_vector_ctrl(entry, entry->pci.msix_ctrl);
 	}
+
+	pci_info(dev, "unlocking\n");
 	msi_unlock_descs(&dev->dev);
 
+	pci_info(dev, "clearing and setting\n");
 	pci_msix_clear_and_set_ctrl(dev, PCI_MSIX_FLAGS_MASKALL, 0);
 }
 
diff --git a/drivers/pci/pci.c b/drivers/pci/pci.c
index 869d204a70a3..7afcf4611ea8 100644
--- a/drivers/pci/pci.c
+++ b/drivers/pci/pci.c
@@ -1898,6 +1898,7 @@ static void pci_restore_rebar_state(struct pci_dev *pdev)
  */
 void pci_restore_state(struct pci_dev *dev)
 {
+	pci_dbg(dev, "PCIDEV state restore# %s\n");
 	if (!dev->state_saved)
 		return;
 
@@ -1941,6 +1942,7 @@ struct pci_saved_state {
  */
 struct pci_saved_state *pci_store_saved_state(struct pci_dev *dev)
 {
+	pci_dbg(dev, "PCIDEV state save# %s\n");
 	struct pci_saved_state *state;
 	struct pci_cap_saved_state *tmp;
 	struct pci_cap_saved_data *cap;
diff --git a/drivers/pci/xen-pcifront.c b/drivers/pci/xen-pcifront.c
index 11636634ae51..2f1da8f684bc 100644
--- a/drivers/pci/xen-pcifront.c
+++ b/drivers/pci/xen-pcifront.c
@@ -187,7 +187,7 @@ static int pcifront_bus_read(struct pci_bus *bus, unsigned int devfn,
 	struct pcifront_sd *sd = bus->sysdata;
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 
-	dev_dbg(&pdev->xdev->dev,
+	dev_info(&pdev->xdev->dev,
 		"read dev=%04x:%02x:%02x.%d - offset %x size %d\n",
 		pci_domain_nr(bus), bus->number, PCI_SLOT(devfn),
 		PCI_FUNC(devfn), where, size);
@@ -195,7 +195,7 @@ static int pcifront_bus_read(struct pci_bus *bus, unsigned int devfn,
 	err = do_pci_op(pdev, &op);
 
 	if (likely(!err)) {
-		dev_dbg(&pdev->xdev->dev, "read got back value %x\n",
+		dev_info(&pdev->xdev->dev, "read got back value %x\n",
 			op.value);
 
 		*val = op.value;
@@ -224,7 +224,7 @@ static int pcifront_bus_write(struct pci_bus *bus, unsigned int devfn,
 	struct pcifront_sd *sd = bus->sysdata;
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 
-	dev_dbg(&pdev->xdev->dev,
+	dev_info(&pdev->xdev->dev,
 		"write dev=%04x:%02x:%02x.%d - offset %x size %d val %x\n",
 		pci_domain_nr(bus), bus->number,
 		PCI_SLOT(devfn), PCI_FUNC(devfn), where, size, val);
@@ -254,6 +254,8 @@ static int pci_frontend_enable_msix(struct pci_dev *dev,
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 	struct msi_desc *entry;
 
+	pci_info(dev, "enable msix xenfront\n");
+
 	if (nvec > SH_INFO_MAX_VEC) {
 		pci_err(dev, "too many vectors (0x%x) for PCI frontend:"
 				   " Increase SH_INFO_MAX_VEC\n", nvec);
@@ -305,6 +307,7 @@ static void pci_frontend_disable_msix(struct pci_dev *dev)
 	struct pcifront_sd *sd = dev->bus->sysdata;
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 
+	pci_info(dev, "disable msix xenfront\n");
 	err = do_pci_op(pdev, &op);
 
 	/* What should do for error ? */
@@ -324,6 +327,7 @@ static int pci_frontend_enable_msi(struct pci_dev *dev, int vector[])
 	struct pcifront_sd *sd = dev->bus->sysdata;
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 
+	pci_info(dev, "enable msi xenfront\n");
 	err = do_pci_op(pdev, &op);
 	if (likely(!err)) {
 		vector[0] = op.value;
@@ -353,6 +357,7 @@ static void pci_frontend_disable_msi(struct pci_dev *dev)
 	struct pcifront_sd *sd = dev->bus->sysdata;
 	struct pcifront_device *pdev = pcifront_get_pdev(sd);
 
+	pci_info(dev, "disable msi xenfront\n");
 	err = do_pci_op(pdev, &op);
 	if (err == XEN_PCI_ERR_dev_not_found) {
 		/* XXX No response from backend, what shall we do? */
@@ -714,7 +719,7 @@ static struct pcifront_device *alloc_pdev(struct xenbus_device *xdev)
 
 	INIT_WORK(&pdev->op_work, pcifront_do_aer);
 
-	dev_dbg(&xdev->dev, "Allocated pdev @ 0x%p pdev->sh_info @ 0x%p\n",
+	dev_info(&xdev->dev, "Allocated pdev @ 0x%p pdev->sh_info @ 0x%p\n",
 		pdev, pdev->sh_info);
 out:
 	return pdev;
-- 
2.49.0

