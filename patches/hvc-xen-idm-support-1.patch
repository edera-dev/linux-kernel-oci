commit cdf0b5f73dcb55533b22b15ddaa12f0117124056
Author: Alex Zenla <alex@edera.dev>
Date:   Sun Nov 10 04:22:34 2024 -0500

    hvc_xen: fix probing of second console, fixes idm support in Edera Protect

diff --git a/drivers/tty/hvc/hvc_xen.c b/drivers/tty/hvc/hvc_xen.c
index 7948660e042f..6724b8d97d2b 100644
--- a/drivers/tty/hvc/hvc_xen.c
+++ b/drivers/tty/hvc/hvc_xen.c
@@ -37,8 +37,6 @@ struct xencons_info {
 	struct xenbus_device *xbdev;
 	struct xencons_interface *intf;
 	unsigned int evtchn;
-	XENCONS_RING_IDX out_cons;
-	unsigned int out_cons_same;
 	struct hvc_struct *hvc;
 	int irq;
 	int vtermno;
@@ -88,11 +86,7 @@ static int __write_console(struct xencons_info *xencons,
 	cons = intf->out_cons;
 	prod = intf->out_prod;
 	mb();			/* update queue values before going on */
-
-	if ((prod - cons) > sizeof(intf->out)) {
-		pr_err_once("xencons: Illegal ring page indices");
-		return -EINVAL;
-	}
+	BUG_ON((prod - cons) > sizeof(intf->out));
 
 	while ((sent < len) && ((prod - cons) < sizeof(intf->out)))
 		intf->out[MASK_XENCONS_IDX(prod++, intf->out)] = data[sent++];
@@ -121,9 +115,6 @@ static int domU_write_console(uint32_t vtermno, const char *data, int len)
 	while (len) {
 		int sent = __write_console(cons, data, len);
 
-		if (sent < 0)
-			return sent;
-
 		data += sent;
 		len -= sent;
 
@@ -140,8 +131,6 @@ static int domU_read_console(uint32_t vtermno, char *buf, int len)
 	XENCONS_RING_IDX cons, prod;
 	int recv = 0;
 	struct xencons_info *xencons = vtermno_to_xencons(vtermno);
-	unsigned int eoiflag = 0;
-
 	if (xencons == NULL)
 		return -EINVAL;
 	intf = xencons->intf;
@@ -149,11 +138,7 @@ static int domU_read_console(uint32_t vtermno, char *buf, int len)
 	cons = intf->in_cons;
 	prod = intf->in_prod;
 	mb();			/* get pointers before reading ring */
-
-	if ((prod - cons) > sizeof(intf->in)) {
-		pr_err_once("xencons: Illegal ring page indices");
-		return -EINVAL;
-	}
+	BUG_ON((prod - cons) > sizeof(intf->in));
 
 	while (cons != prod && recv < len)
 		buf[recv++] = intf->in[MASK_XENCONS_IDX(cons++, intf->in)];
@@ -161,27 +146,7 @@ static int domU_read_console(uint32_t vtermno, char *buf, int len)
 	mb();			/* read ring before consuming */
 	intf->in_cons = cons;
 
-	/*
-	 * When to mark interrupt having been spurious:
-	 * - there was no new data to be read, and
-	 * - the backend did not consume some output bytes, and
-	 * - the previous round with no read data didn't see consumed bytes
-	 *   (we might have a race with an interrupt being in flight while
-	 *   updating xencons->out_cons, so account for that by allowing one
-	 *   round without any visible reason)
-	 */
-	if (intf->out_cons != xencons->out_cons) {
-		xencons->out_cons = intf->out_cons;
-		xencons->out_cons_same = 0;
-	}
-	if (recv) {
-		notify_daemon(xencons);
-	} else if (xencons->out_cons_same++ > 1) {
-		eoiflag = XEN_EOI_FLAG_SPURIOUS;
-	}
-
-	xen_irq_lateeoi(xencons->irq, eoiflag);
-
+	notify_daemon(xencons);
 	return recv;
 }
 
@@ -410,7 +375,7 @@ static int xencons_connect_backend(struct xenbus_device *dev,
 	if (ret)
 		return ret;
 	info->evtchn = evtchn;
-	irq = bind_interdomain_evtchn_to_irq_lateeoi(dev->otherend_id, evtchn);
+	irq = bind_evtchn_to_irq(evtchn);
 	if (irq < 0)
 		return irq;
 	info->irq = irq;
@@ -574,7 +539,7 @@ static int __init xen_hvc_init(void)
 			return r;
 
 		info = vtermno_to_xencons(HVC_COOKIE);
-		info->irq = bind_evtchn_to_irq_lateeoi(info->evtchn);
+		info->irq = bind_evtchn_to_irq(info->evtchn);
 	}
 	if (info->irq < 0)
 		info->irq = 0; /* NO_IRQ */
