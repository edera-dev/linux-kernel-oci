commit 2f49a6cbd11cf5d007e5492d1ad09cdd02a3c315
Author: Alex Zenla <alex@edera.dev>
Date:   Mon Nov 11 01:05:45 2024 -0500

    hvc_xen: fix probing of second console, fixes idm support in Edera Protect

diff --git a/drivers/tty/hvc/hvc_xen.c b/drivers/tty/hvc/hvc_xen.c
index 4886cad0fde6..92c9a476defc 100644
--- a/drivers/tty/hvc/hvc_xen.c
+++ b/drivers/tty/hvc/hvc_xen.c
@@ -37,13 +37,10 @@ struct xencons_info {
 	struct xenbus_device *xbdev;
 	struct xencons_interface *intf;
 	unsigned int evtchn;
-	XENCONS_RING_IDX out_cons;
-	unsigned int out_cons_same;
 	struct hvc_struct *hvc;
 	int irq;
 	int vtermno;
 	grant_ref_t gntref;
-	spinlock_t ring_lock;
 };
 
 static LIST_HEAD(xenconsoles);
@@ -53,22 +50,17 @@ static DEFINE_SPINLOCK(xencons_lock);
 
 static struct xencons_info *vtermno_to_xencons(int vtermno)
 {
-	struct xencons_info *entry, *ret = NULL;
-	unsigned long flags;
+	struct xencons_info *entry, *n, *ret = NULL;
 
-	spin_lock_irqsave(&xencons_lock, flags);
-	if (list_empty(&xenconsoles)) {
-		spin_unlock_irqrestore(&xencons_lock, flags);
-		return NULL;
-	}
+	if (list_empty(&xenconsoles))
+			return NULL;
 
-	list_for_each_entry(entry, &xenconsoles, list) {
+	list_for_each_entry_safe(entry, n, &xenconsoles, list) {
 		if (entry->vtermno == vtermno) {
 			ret  = entry;
 			break;
 		}
 	}
-	spin_unlock_irqrestore(&xencons_lock, flags);
 
 	return ret;
 }
@@ -90,25 +82,17 @@ static int __write_console(struct xencons_info *xencons,
 	XENCONS_RING_IDX cons, prod;
 	struct xencons_interface *intf = xencons->intf;
 	int sent = 0;
-	unsigned long flags;
 
-	spin_lock_irqsave(&xencons->ring_lock, flags);
 	cons = intf->out_cons;
 	prod = intf->out_prod;
 	mb();			/* update queue values before going on */
-
-	if ((prod - cons) > sizeof(intf->out)) {
-		spin_unlock_irqrestore(&xencons->ring_lock, flags);
-		pr_err_once("xencons: Illegal ring page indices");
-		return -EINVAL;
-	}
+	BUG_ON((prod - cons) > sizeof(intf->out));
 
 	while ((sent < len) && ((prod - cons) < sizeof(intf->out)))
 		intf->out[MASK_XENCONS_IDX(prod++, intf->out)] = data[sent++];
 
 	wmb();			/* write ring before updating pointer */
 	intf->out_prod = prod;
-	spin_unlock_irqrestore(&xencons->ring_lock, flags);
 
 	if (sent)
 		notify_daemon(xencons);
@@ -130,10 +114,7 @@ static int domU_write_console(uint32_t vtermno, const char *data, int len)
 	 */
 	while (len) {
 		int sent = __write_console(cons, data, len);
-
-		if (sent < 0)
-			return sent;
-
+		
 		data += sent;
 		len -= sent;
 
@@ -150,23 +131,14 @@ static int domU_read_console(uint32_t vtermno, char *buf, int len)
 	XENCONS_RING_IDX cons, prod;
 	int recv = 0;
 	struct xencons_info *xencons = vtermno_to_xencons(vtermno);
-	unsigned int eoiflag = 0;
-	unsigned long flags;
-
 	if (xencons == NULL)
 		return -EINVAL;
 	intf = xencons->intf;
 
-	spin_lock_irqsave(&xencons->ring_lock, flags);
 	cons = intf->in_cons;
 	prod = intf->in_prod;
 	mb();			/* get pointers before reading ring */
-
-	if ((prod - cons) > sizeof(intf->in)) {
-		spin_unlock_irqrestore(&xencons->ring_lock, flags);
-		pr_err_once("xencons: Illegal ring page indices");
-		return -EINVAL;
-	}
+	BUG_ON((prod - cons) > sizeof(intf->in));
 
 	while (cons != prod && recv < len)
 		buf[recv++] = intf->in[MASK_XENCONS_IDX(cons++, intf->in)];
@@ -174,30 +146,7 @@ static int domU_read_console(uint32_t vtermno, char *buf, int len)
 	mb();			/* read ring before consuming */
 	intf->in_cons = cons;
 
-	/*
-	 * When to mark interrupt having been spurious:
-	 * - there was no new data to be read, and
-	 * - the backend did not consume some output bytes, and
-	 * - the previous round with no read data didn't see consumed bytes
-	 *   (we might have a race with an interrupt being in flight while
-	 *   updating xencons->out_cons, so account for that by allowing one
-	 *   round without any visible reason)
-	 */
-	if (intf->out_cons != xencons->out_cons) {
-		xencons->out_cons = intf->out_cons;
-		xencons->out_cons_same = 0;
-	}
-	if (!recv && xencons->out_cons_same++ > 1) {
-		eoiflag = XEN_EOI_FLAG_SPURIOUS;
-	}
-	spin_unlock_irqrestore(&xencons->ring_lock, flags);
-
-	if (recv) {
-		notify_daemon(xencons);
-	}
-
-	xen_irq_lateeoi(xencons->irq, eoiflag);
-
+	notify_daemon(xencons);
 	return recv;
 }
 
@@ -239,7 +188,7 @@ static int xen_hvm_console_init(void)
 {
 	int r;
 	uint64_t v = 0;
-	unsigned long gfn, flags;
+	unsigned long gfn;
 	struct xencons_info *info;
 
 	if (!xen_hvm_domain())
@@ -250,7 +199,6 @@ static int xen_hvm_console_init(void)
 		info = kzalloc(sizeof(struct xencons_info), GFP_KERNEL);
 		if (!info)
 			return -ENOMEM;
-		spin_lock_init(&info->ring_lock);
 	} else if (info->intf != NULL) {
 		/* already configured */
 		return 0;
@@ -275,9 +223,9 @@ static int xen_hvm_console_init(void)
 		goto err;
 	info->vtermno = HVC_COOKIE;
 
-	spin_lock_irqsave(&xencons_lock, flags);
+	spin_lock(&xencons_lock);
 	list_add_tail(&info->list, &xenconsoles);
-	spin_unlock_irqrestore(&xencons_lock, flags);
+	spin_unlock(&xencons_lock);
 
 	return 0;
 err:
@@ -287,7 +235,6 @@ static int xen_hvm_console_init(void)
 
 static int xencons_info_pv_init(struct xencons_info *info, int vtermno)
 {
-	spin_lock_init(&info->ring_lock);
 	info->evtchn = xen_start_info->console.domU.evtchn;
 	/* GFN == MFN for PV guest */
 	info->intf = gfn_to_virt(xen_start_info->console.domU.mfn);
@@ -301,7 +248,6 @@ static int xencons_info_pv_init(struct xencons_info *info, int vtermno)
 static int xen_pv_console_init(void)
 {
 	struct xencons_info *info;
-	unsigned long flags;
 
 	if (!xen_pv_domain())
 		return -ENODEV;
@@ -318,9 +264,9 @@ static int xen_pv_console_init(void)
 		/* already configured */
 		return 0;
 	}
-	spin_lock_irqsave(&xencons_lock, flags);
+	spin_lock(&xencons_lock);
 	xencons_info_pv_init(info, HVC_COOKIE);
-	spin_unlock_irqrestore(&xencons_lock, flags);
+	spin_unlock(&xencons_lock);
 
 	return 0;
 }
@@ -328,7 +274,6 @@ static int xen_pv_console_init(void)
 static int xen_initial_domain_console_init(void)
 {
 	struct xencons_info *info;
-	unsigned long flags;
 
 	if (!xen_initial_domain())
 		return -ENODEV;
@@ -338,15 +283,14 @@ static int xen_initial_domain_console_init(void)
 		info = kzalloc(sizeof(struct xencons_info), GFP_KERNEL);
 		if (!info)
 			return -ENOMEM;
-		spin_lock_init(&info->ring_lock);
 	}
 
 	info->irq = bind_virq_to_irq(VIRQ_CONSOLE, 0, false);
 	info->vtermno = HVC_COOKIE;
 
-	spin_lock_irqsave(&xencons_lock, flags);
+	spin_lock(&xencons_lock);
 	list_add_tail(&info->list, &xenconsoles);
-	spin_unlock_irqrestore(&xencons_lock, flags);
+	spin_unlock(&xencons_lock);
 
 	return 0;
 }
@@ -377,21 +321,18 @@ void xen_console_resume(void)
 #ifdef CONFIG_HVC_XEN_FRONTEND
 static void xencons_disconnect_backend(struct xencons_info *info)
 {
-	if (info->hvc != NULL)
-		hvc_remove(info->hvc);
-	info->hvc = NULL;
-	if (info->irq > 0) {
-		evtchn_put(info->evtchn);
-		info->irq = 0;
-		info->evtchn = 0;
-	}
-	/* evtchn_put() will also close it so this is only an error path */
+	if (info->irq > 0)
+		unbind_from_irqhandler(info->irq, NULL);
+	info->irq = 0;
 	if (info->evtchn > 0)
 		xenbus_free_evtchn(info->xbdev, info->evtchn);
 	info->evtchn = 0;
 	if (info->gntref > 0)
 		gnttab_free_grant_references(info->gntref);
 	info->gntref = 0;
+	if (info->hvc != NULL)
+		hvc_remove(info->hvc);
+	info->hvc = NULL;
 }
 
 static void xencons_free(struct xencons_info *info)
@@ -404,12 +345,10 @@ static void xencons_free(struct xencons_info *info)
 
 static int xen_console_remove(struct xencons_info *info)
 {
-	unsigned long flags;
-
 	xencons_disconnect_backend(info);
-	spin_lock_irqsave(&xencons_lock, flags);
+	spin_lock(&xencons_lock);
 	list_del(&info->list);
-	spin_unlock_irqrestore(&xencons_lock, flags);
+	spin_unlock(&xencons_lock);
 	if (info->xbdev != NULL)
 		xencons_free(info);
 	else {
@@ -436,7 +375,7 @@ static int xencons_connect_backend(struct xenbus_device *dev,
 	if (ret)
 		return ret;
 	info->evtchn = evtchn;
-	irq = bind_interdomain_evtchn_to_irq_lateeoi(dev->otherend_id, evtchn);
+	irq = bind_evtchn_to_irq(evtchn);
 	if (irq < 0)
 		return irq;
 	info->irq = irq;
@@ -490,7 +429,6 @@ static int xencons_probe(struct xenbus_device *dev,
 {
 	int ret, devid;
 	struct xencons_info *info;
-	unsigned long flags;
 
 	devid = dev->nodename[strlen(dev->nodename) - 1] - '0';
 	if (devid == 0)
@@ -499,7 +437,6 @@ static int xencons_probe(struct xenbus_device *dev,
 	info = kzalloc(sizeof(struct xencons_info), GFP_KERNEL);
 	if (!info)
 		return -ENOMEM;
-	spin_lock_init(&info->ring_lock);
 	dev_set_drvdata(&dev->dev, info);
 	info->xbdev = dev;
 	info->vtermno = xenbus_devid_to_vtermno(devid);
@@ -510,9 +447,9 @@ static int xencons_probe(struct xenbus_device *dev,
 	ret = xencons_connect_backend(dev, info);
 	if (ret < 0)
 		goto error;
-	spin_lock_irqsave(&xencons_lock, flags);
+	spin_lock(&xencons_lock);
 	list_add_tail(&info->list, &xenconsoles);
-	spin_unlock_irqrestore(&xencons_lock, flags);
+	spin_unlock(&xencons_lock);
 
 	return 0;
 
@@ -556,23 +493,10 @@ static void xencons_backend_changed(struct xenbus_device *dev,
 		if (dev->state == XenbusStateClosed)
 			break;
 		fallthrough;	/* Missed the backend's CLOSING state */
-	case XenbusStateClosing: {
-		struct xencons_info *info = dev_get_drvdata(&dev->dev);;
-
-		/*
-		 * Don't tear down the evtchn and grant ref before the other
-		 * end has disconnected, but do stop userspace from trying
-		 * to use the device before we allow the backend to close.
-		 */
-		if (info->hvc) {
-			hvc_remove(info->hvc);
-			info->hvc = NULL;
-		}
-
+	case XenbusStateClosing:
 		xenbus_frontend_closed(dev);
 		break;
 	}
-	}
 }
 
 static const struct xenbus_device_id xencons_ids[] = {
@@ -603,7 +527,7 @@ static int __init xen_hvc_init(void)
 		ops = &dom0_hvc_ops;
 		r = xen_initial_domain_console_init();
 		if (r < 0)
-			goto register_fe;
+			return r;
 		info = vtermno_to_xencons(HVC_COOKIE);
 	} else {
 		ops = &domU_hvc_ops;
@@ -612,10 +536,10 @@ static int __init xen_hvc_init(void)
 		else
 			r = xen_pv_console_init();
 		if (r < 0)
-			goto register_fe;
+			return r;
 
 		info = vtermno_to_xencons(HVC_COOKIE);
-		info->irq = bind_evtchn_to_irq_lateeoi(info->evtchn);
+		info->irq = bind_evtchn_to_irq(info->evtchn);
 	}
 	if (info->irq < 0)
 		info->irq = 0; /* NO_IRQ */
@@ -624,20 +548,17 @@ static int __init xen_hvc_init(void)
 
 	info->hvc = hvc_alloc(HVC_COOKIE, info->irq, ops, 256);
 	if (IS_ERR(info->hvc)) {
-		unsigned long flags;
-
 		r = PTR_ERR(info->hvc);
-		spin_lock_irqsave(&xencons_lock, flags);
+		spin_lock(&xencons_lock);
 		list_del(&info->list);
-		spin_unlock_irqrestore(&xencons_lock, flags);
+		spin_unlock(&xencons_lock);
 		if (info->irq)
-			evtchn_put(info->evtchn);
+			unbind_from_irqhandler(info->irq, NULL);
 		kfree(info);
 		return r;
 	}
 
 	r = 0;
- register_fe:
 #ifdef CONFIG_HVC_XEN_FRONTEND
 	r = xenbus_register_frontend(&xencons_driver);
 #endif
